using System.Linq;
using System.Reflection;
using System.Text;
using NHibernate;
using NHibernate.Linq;

namespace 'Name'.Data
{
    using System;
    using System.Collections.Generic;

    public abstract class DataAccessObject<TEntity> : IDisposable, IDataAccessObject<TEntity>
    {
        protected ISession _session;
        
        public DataAccessObject()
        {
            _session = NHibernateHelper.OpenSession();
        }

        public void Dispose()
        {
            _session.Close();
        }

        public ICollection<TEntity> GetAll()
        {
            return _session.Query<TEntity>().ToList();
        }

        public TEntity GetById(int id)
        {
            return _session.Get<TEntity>(id);
        }

        public void Add(TEntity item)
        {
            using (var t = _session.BeginTransaction())
            {
                _session.Save(item);
                t.Commit();
            }
        }

        public void Update(TEntity item)
        {
            using (var t = _session.BeginTransaction())
            {
                _session.Update(item);
                t.Commit();
            }
        }

        public void Delete(TEntity item)
        {
            using (var t = _session.BeginTransaction())
            {
                _session.Delete(item);
                t.Commit();
            }
        }

        public long Count()
        {
            return _session.Query<TEntity>().Count();
        }

        public ICollection<TEntity> Filter(string query)
        {
            throw new NotImplementedException();
        }
    }
   
}